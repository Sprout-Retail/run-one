#!/bin/sh -e
#
#    run-one - run just one instance at a time of some command and
#              unique set of arguments (useful for cronjobs, eg)
#
#    run-this-one - kill any identical command/args processes
#                   before running this one
#
#    keep-one-running - run-one, but respawn every time that one exits
#
#    Copyright (C) 2010-2011 Dustin Kirkland <kirkland@ubuntu.com>
#
#    Authors:
#        Dustin Kirkland <kirkland@ubuntu.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

PROG="run-one"

if [ $# -eq 0 ]; then
	echo "ERROR: no arguments specified" 1>&2
	exit 1
fi

# Cache hashes here, to keep one user from DoS'ing another
DIR="$HOME/.cache/$PROG"
mkdir -p "$DIR"

# Calculate the hash of the command and arguments
CMD="$@"
CMDHASH=$(echo "$CMD" | md5sum | awk '{print $1}')
FLAG="$DIR/$CMDHASH"

base="$(basename $0)"
case "$base" in
	run-one)
		# Run the specified command, assuming we can flock this command string's hash
		flock -xn "$FLAG" -c "$CMD"
	;;
	run-this-one)
		ps="$CMD"
		# Loop through matching pids
		for p in $(pgrep -u "$USER" -f "^$ps$" || true); do
			# Try to kill pid
			kill $p
			# And then block until killed
			while ps $p >/dev/null 2>&1; do
				kill $p
				sleep 1
			done
		done
		# Also try to use lsof, but it seems that flock()'s
		# are not always persistent enough, so this is purely auxilliary.
		pid=$(lsof "$FLAG" 2>/dev/null | awk '{print $2}' | grep "^[0-9]") || true
		[ -z "$pid" ] || kill $pid
		sleep 0.5
		# Run the specified command, assuming we can flock this command string's hash
		flock -xn "$FLAG" -c "$CMD"
	;;
	keep-one-running|run-until-success|run-until-failure)
		backoff=1
		while true; do
			# Run the specified command, assuming we can flock this command string's hash
			set +e
			flock -xn "$FLAG" -c "$CMD"
			if [ "$?" = 0 ]; then
				# If we were waiting for success, we're done
				[ "$base" = "run-until-success" ] && exit $?
				# Last run finished successfully, reset to minimum back-off of 1 second
				backoff=1
			else
				# If we were waiting for failure, we're done
				[ "$base" = "run-until-failure" ] && exit $?
				# Last run failed, so slow down the retries (up to 5 minutes)
				backoff=$((backoff + 1))
				[ $backoff -gt 300 ] && backoff=300
				logger -t "${base}[$$]" "last run failed; sleeping [$backoff] seconds before next run"
			fi
			sleep $backoff
		done
	;;
esac
